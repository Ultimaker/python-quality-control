on:
  workflow_call:
    inputs:

      PYTHON_QUALITY_DIR:
        description: "The relative dir in the repository where Python Quality Control is mounted as submodule"
        type: string
        required: true

      dbus-interface-lib:
        description: "Yes if the unit test for this repo requires dbus-interface-lib"
        type: boolean
        required: false
        default: false

      marvin-service:
        description: "Yes if the unit test for this repo requires marvin-service"
        type: boolean
        required: false
        default: false

      libPalantir:
        description: "Yes if the unit test for this repo requires libPalantir"
        type: boolean
        required: false
        default: false

      libSmeagol:
        description: "Yes if the unit test for this repo requires libSmeagol"
        type: boolean
        required: false
        default: false

      libCharon:
        description: "Yes if the unit test for this repo requires libCharon"
        type: boolean
        required: false
        default: false

      libLogger:
        description: "Yes if the unit test for this repo requires libLogger"
        type: boolean
        required: false
        default: false

      ultiLib:
        description: "Yes if the unit test for this repo requires ultiLib"
        type: boolean
        required: false
        default: false

jobs:
  PyTest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          submodules: recursive
          path: repo_under_test

      - name: Fetch Companion Repositories
        uses: ./repo_under_test/ci/.github/actions/fetch_companion_repos
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          dbus-interface-lib: ${{ inputs.dbus-interface-lib }}
          marvin-service: ${{ inputs.marvin-service }}
          libPalantir: ${{ inputs.libPalantir }}
          libSmeagol: ${{ inputs.libSmeagol }}
          libCharon: ${{ inputs.libCharon }}
          libLogger: ${{ inputs.libLogger }}
          ultiLib: ${{ inputs.ultiLib }}
        
      - name: PyTest
        run: |
          cd repo_under_test
          source ./docker_env/make_docker.sh ""
          run_in_docker "./${{ inputs.PYTHON_QUALITY_DIR }}/run_pytest.sh"

      - name: Dump GitHub context
        if: ${{ always() }}
        env:
           GITHUB_CONTEXT: ${{ toJson(github) }}
           JOB_CONTEXT: ${{ toJson(job) }}
           STEPS_CONTEXT: ${{ toJson(steps) }}
           RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "${GITHUB_CONTEXT}"
          echo "${JOB_CONTEXT}"
          echo "${STEPS_CONTEXT}"
          echo "${RUNNER_CONTEXT}"
          
