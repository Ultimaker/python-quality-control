on:
  workflow_call:
    inputs:

      PYTHON_QUALITY_DIR:
        description: "The relative dir in the repository where Python Quality Control is mounted as submodule"
        type: string
        required: true

      dbus-interface-lib:
        description: "Yes if the unit test for this repo requires dbus-interface-lib"
        type: boolean
        required: false
        default: false

      marvin-service:
        description: "Yes if the unit test for this repo requires marvin-service"
        type: boolean
        required: false
        default: false

      libPalantir:
        description: "Yes if the unit test for this repo requires libPalantir"
        type: boolean
        required: false
        default: false

      libSmeagol:
        description: "Yes if the unit test for this repo requires libSmeagol"
        type: boolean
        required: false
        default: false

      libCharon:
        description: "Yes if the unit test for this repo requires libCharon"
        type: boolean
        required: false
        default: false

      libLogger:
        description: "Yes if the unit test for this repo requires libLogger"
        type: boolean
        required: false
        default: false

      ultiLib:
        description: "Yes if the unit test for this repo requires ultiLib"
        type: boolean
        required: false
        default: false

jobs:
  PyTest:
    runs-on: ubuntu-latest
    steps:
      - name: Clone dbus-interface-lib on default branch
        if: ${{ inputs.dbus-interface-lib }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/dbus-interface-lib
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: dbus-interface-lib
          fetch-depth: 0

      - name: Trying to checkout dbus-interface-lib on branch ${{ github.ref_name }}
        if: ${{ inputs.dbus-interface-lib }}
        continue-on-error: true
        run: |
          cd dbus-interface-lib
          git checkout ${{ github.ref_name }}

      - name: Clone marvin-service on default branch
        if: ${{ inputs.marvin-service }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/marvin-service
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: marvin-service
          fetch-depth: 0

      - name: Trying to checkout marvin-service on branch ${{ github.ref_name }}
        if: ${{ inputs.marvin-service }}
        continue-on-error: true
        run: |
          cd marvin-service
          git checkout ${{ github.ref_name }}

      - name: Clone libPalantir on default branch
        if: ${{ inputs.libPalantir }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/libPalantir
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: libPalantir
          fetch-depth: 0

      - name: Trying to checkout libPalantir on branch ${{ github.ref_name }}
        if: ${{ inputs.libPalantir }}
        continue-on-error: true
        run: |
          cd libPalantir
          git checkout ${{ github.ref_name }}

      - name: Clone libSmeagol on default branch
        if: ${{ inputs.libSmeagol }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/libSmeagol
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: libSmeagol
          fetch-depth: 0

      - name: Trying to checkout libSmeagol on branch ${{ github.ref_name }}
        if: ${{ inputs.libSmeagol }}
        continue-on-error: true
        run: |
          cd libSmeagol
          git checkout ${{ github.ref_name }}

      - name: Clone libCharon on default branch
        if: ${{ inputs.libCharon }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/libCharon
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: libCharon
          fetch-depth: 0

      - name: Trying to checkout libCharon on branch ${{ github.ref_name }}
        if: ${{ inputs.libCharon }}
        continue-on-error: true
        run: |
          cd libCharon
          git checkout ${{ github.ref_name }}

      - name: Clone libLogger on default branch
        if: ${{ inputs.libLogger }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/libLogger
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: libLogger
          fetch-depth: 0

      - name: Trying to checkout libLogger on branch ${{ github.ref_name }}
        if: ${{ inputs.libLogger }}
        continue-on-error: true
        run: |
          cd libLogger
          git checkout ${{ github.ref_name }}

      - name: Clone ultiLib on default branch
        if: ${{ inputs.ultiLib }}
        uses: actions/checkout@v4
        with:
          repository: Ultimaker/ultiLib
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          path: ultiLib
          fetch-depth: 0

      - name: Trying to checkout ultiLib on branch ${{ github.ref_name }}
        if: ${{ inputs.ultiLib }}
        continue-on-error: true
        run: |
          cd ultiLib
          git checkout ${{ github.ref_name }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          submodules: recursive
          path: repo_under_test

      - name: PyTest
        run: |
          cd repo_under_test
          source ./docker_env/make_docker.sh ""
          run_in_docker "./${{ inputs.PYTHON_QUALITY_DIR }}/run_pytest.sh"

      - name: Dump GitHub context
        if: ${{ always() }}
        env:
           GITHUB_CONTEXT: ${{ toJson(github) }}
           JOB_CONTEXT: ${{ toJson(job) }}
           STEPS_CONTEXT: ${{ toJson(steps) }}
           RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "${GITHUB_CONTEXT}"
          echo "${JOB_CONTEXT}"
          echo "${STEPS_CONTEXT}"
          echo "${RUNNER_CONTEXT}"
          
