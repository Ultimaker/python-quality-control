on:
  workflow_call:
    inputs:
      dbus-interface-lib:
        description: "Yes if the unit test for this repo requires dbus-interface-lib"
        type: boolean
        required: false
        default: false
      marvin-service:
        description: "Yes if the unit test for this repo requires marvin-service"
        type: boolean
        required: false
        default: false
      libPalantir:
        description: "Yes if the unit test for this repo requires libPalantir"
        type: boolean
        required: false
        default: false
      libSmeagol:
        description: "Yes if the unit test for this repo requires libSmeagol"
        type: boolean
        required: false
        default: false
      libCharon:
        description: "Yes if the unit test for this repo requires libCharon"
        type: boolean
        required: false
        default: false
      libLogger:
        description: "Yes if the unit test for this repo requires libLogger"
        type: boolean
        required: false
        default: false
      ultiLib:
        description: "Yes if the unit test for this repo requires ultiLib"
        type: boolean
        required: false
        default: false

jobs:
  PyTest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          submodules: recursive
          path: repo_under_test

      - name: Clone dbus-interface-lib
        if: ${{ inputs.dbus-interface-lib }}
        uses: ./repo_under_test/ci/.github/actions/clone_repo
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          repository: dbus-interface-lib

      - name: Clone marvin-service
        if: ${{ inputs.marvin-service }}
        uses: ./repo_under_test/ci/.github/actions/clone_repo
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          repository: marvin-service

      - name: Clone libSmeagol
        if: ${{ inputs.libSmeagol }}
        uses: ./repo_under_test/ci/.github/actions/clone_repo
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          repository: libSmeagol

      - name: Clone libCharon
        if: ${{ inputs.libCharon }}
        uses: ./repo_under_test/ci/.github/actions/clone_repo
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          repository: libCharon

      - name: Clone libLogger
        if: ${{ inputs.libLogger }}
        uses: ./repo_under_test/ci/.github/actions/clone_repo
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          repository: libLogger

      - name: Clone ultiLib
        if: ${{ inputs.ultiLib }}
        uses: ./repo_under_test/ci/.github/actions/clone_repo
        with:
          token: ${{ secrets.ULTIMAKER_CI_PAT }}
          repository: ultiLib
        
      - name: PyTest
        run: |
          cd repo_under_test
          source ./docker_env/make_docker.sh ""
          run_in_docker "./ci/run_pytest.sh"

      - name: Dump GitHub context
        if: ${{ always() }}
        env:
           GITHUB_CONTEXT: ${{ toJson(github) }}
           JOB_CONTEXT: ${{ toJson(job) }}
           STEPS_CONTEXT: ${{ toJson(steps) }}
           RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: |
          echo "${GITHUB_CONTEXT}"
          echo "${JOB_CONTEXT}"
          echo "${STEPS_CONTEXT}"
          echo "${RUNNER_CONTEXT}"
          
